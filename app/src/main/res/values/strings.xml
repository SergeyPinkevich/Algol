<resources>
    <string name="app_name">Algol</string>

    <string name="drawer_open">drawer open</string>
    <string name="drawer_close">drawer close</string>

    <!-- Categories -->
    <string name="title_sort">Sorting</string>
    <string name="title_graph">Graph algorithms</string>

    <!-- Sorting items -->
    <string name="bubble_sort">Bubble Sort</string>
    <string name="insertion_sort">Insertion Sort</string>
    <string name="quick_sort">Quick Sort</string>

    <!-- Navigation drawer -->
    <string name="open_drawer">Open drawer</string>
    <string name="close_drawer">Close drawer</string>

    <string name="nav_home">Home</string>
    <string name="nav_settings">Settings</string>
    <string name="nav_notifications">Notifications</string>
    <string name="nav_rate">Rate</string>
    <string name="nav_logout">Log out</string>

    <!-- Algorithms's description -->
    <string name="bubble_sort_description">Bubble sort, sometimes referred to as sinking sort, is a simple sorting
        algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps
        them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates
        that the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements
        "bubble" to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems
        even when compared to insertion sort. It can be practical if the input is usually in sorted order but may occasionally
        have some out-of-order elements nearly in position.</string>
    <string name="insertion_sort_description">The algorithm that people often use to sort bridge hands is to consider the cards one at a time, inserting each into its proper place among those already
        considered (keeping them sorted). In a computer implementation, we need to make
        space to insert the current item by moving larger items one position to the right, before
        inserting the current item into the vacated position. \n \nAs in selection sort, the items to the left of the current index are in sorted order during the sort, but they are not in their final position, as they may have to be moved to
        make room for smaller items encountered later. The array is, however, fully sorted when
        the index reaches the right end. \n \nUnlike that of selection sort, the running time of insertion sort depends on the initial order of the items in the input. For example, if the array is large and its entries are
        already in order (or nearly in order), then insertion sort is much, much faster than if
        the entries are randomly ordered or in reverse order.</string>
    <string name="selection_sort_description">The algorithm works by selecting the smallest unsorted item and then swapping it with the item in the next position to be filled.\n \nThe selection sort works as follows: you look through the entire array for the smallest element, once you find it you swap it (the smallest element) with the first element of the array. Then you look for the smallest element in the remaining array (an array without the first element) and swap it with the second element. Then you look for the smallest element in the remaining array (an array without first and second elements) and swap it with the third element, and so on.</string>

    <!-- Auth strings -->
    <string name="enter_email">Enter email address</string>
    <string name="enter_password">Enter password</string>
    <string name="short_password">Password too short, enter minimum 6 characters</string>
    <string name="auth_failed">Authentication failed, check your email and password or sign up</string>
    <string name="success_reset">We have sent you instructions to reset your password</string>
    <string name="failed_reset">Failed to send reset email</string>
    <string name="hint_email">Email</string>
    <string name="hint_password">Password</string>
    <string name="button_login">SIGN IN</string>
    <string name="button_register">SIGN UP</string>
    <string name="button_forgot_password">Forgot your password</string>
    <string name="button_reset_password">RESET PASSWORD</string>
    <string name="button_back">BACK</string>
    <string name="link_to_register">Not a member? Get registered right now!</string>
    <string name="link_to_login">Already registered. Login Me!</string>
    <string name="label_forgot_password">Forgot password?</string>
    <string name="message_forgot_password">We just need your registered Email Id to sent you password reset instructions</string>
    <string name="app_title">ALGORITHMS</string>
    <string name="app_version">v0.1b</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

</resources>
